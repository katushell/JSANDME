let name = "Иван";

// Вставим переменную
console.log( `Привет, ${name}!` ); // Привет, Иван!

// Вставим выражение
console.log( `результат: ${1 + 2}` ); // результат: 3

// в обратные кавычки можно заключать вообще что-угодно

typeof 10n // "bigint"

// в js максимальное значение числа это 2 в 53 степени
// чтобы обойти ограничения, в конце числа нужно поставить 'n'

typeof null // "object" и это ошибка языка, которую оставили ради совместимости

typeof alert // "fucntion" , такого типа не существует, 
//но typeof обрататывает функции особым образом (это просто удобно)


//Тип данных Symbol

// Символы гарантированно уникальны. Даже если мы создадим множество символов с одинаковым описанием, это всё равно будут разные символы. 
// Описание – это просто метка, которая ни на что не влияет.
// Например, вот два символа с одинаковым описанием – но они не равны:

let id = Symbol('id');
let id2 = Symbol('id');
console.log(id == id2)

//символы невозможно сделать строкой через alert
// alert(id); //  TypeError: Cannot convert a Symbol value to a string

console.log(id.toString()) //сработает, потому что теперь приведено к виду строки
console.log(id.description); // id



let user = {
    name: "Вася"
  };
  
  let id3 = Symbol("id");
  user[id3] = 567;
  console.log( user[id3] ); // мы можем получить доступ к данным по ключу-символу


