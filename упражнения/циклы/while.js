// let i = 0;
// while (i < 3) { // выводит 0, затем 1, затем 2
//   alert( i );
//   i++;
// }

//Одно выполнение тела цикла по-научному называется итерация. Цикл в примере выше совершает три итерации.

// let i = 3;
// while (i) { // когда i будет равно 0, условие станет ложным, и цикл остановится (то же самое что i != 0)
//   alert( i );
//   i--;
// }

// let i = 0;
// do {
//   alert( i );
//   i++;
// } while (i < 3);


// for (let i = 0; i < 3; i++) { // выведет 0, затем 1, затем 2
//     alert(i);
//   }

//   let i = 0 
//   это начало цикла, выполняется один раз при входе в цикл

//   i < 3 
//   это условие цикла, проверяется при каждой итерации, если тут false, цикл останавливается 

//   i++ 
//   это шаг, он выполняется после тела цикла на каждой итерации перед проверкой условия.

//   alert(i)
//   это тело цикла

// Выполнить *начало*
// → (Если *условие* == true → Выполнить *тело*, Выполнить *шаг*)
// → (Если *условие* == true → Выполнить *тело*, Выполнить *шаг*)
// → (Если *условие* == true → Выполнить *тело*, Выполнить *шаг*)
// → ...


//Любая часть for может быть пропущена.

// let i = 0; // мы уже имеем объявленную i с присвоенным значением

// for (; i < 3; i++) { // нет необходимости в "начале"
//   alert( i ); // 0, 1, 2
// }

// можно пропустить и шаг, если сделать alert( i++ );

//При этом сами точки с запятой ; обязательно должны присутствовать, иначе будет ошибка синтаксиса.


// let sum = 0;
// while (true) {
//   let value = +prompt("Введите число", '');
//   if (!value) break; // (*)
//   sum += value;
// }
// alert( 'Сумма: ' + sum );


// for (let i = 0; i < 10; i++) {

//     // если true, пропустить оставшуюся часть тела цикла
//     if (i % 2 == 0) continue; //остаток от деления = 0 , % - остаток от деления
  
//     alert(i); // 1, затем 3, 5, 7, 9
//   }

  //Для чётных значений i, директива continue прекращает выполнение тела цикла 
  //и передаёт управление на следующую итерацию for (со следующим числом). 
  //Таким образом alert вызывается только для нечётных значений.


  //Нельзя использовать break/continue справа от оператора „?“

// for (let i = 2; i <= 10 ; i++ ){
//     if (!(i % 2) == 0) continue;
//     alert(i)
// }

// Перепишите код, заменив цикл for на while, без изменения поведения цикла.
// for (let i = 0; i < 3; i++) {
//     alert( `number ${i}!` );
//   }

// let i = 0 ;
// while (i < 3){
//     alert( `number ${i}!` );
//     i++
// }

// Напишите цикл, который предлагает prompt ввести число, большее 100. 
// Если посетитель ввёл другое число – попросить ввести ещё раз, и так далее.

// Цикл должен спрашивать число пока либо посетитель не введёт число, большее 100, 
// либо не нажмёт кнопку Отмена (ESC).

// Предполагается, что посетитель вводит только числа. 
// Предусматривать обработку нечисловых строк в этой задаче необязательно.

// let num;

// do {
//   num = prompt("Введите число, большее 100?", 0);
// } while (num <= 100 && num);


// Натуральное число, большее 1, называется простым, если оно ни на что не делится, кроме себя и 1.

// Другими словами, n > 1 – простое, если при его делении на любое число кроме 1 и n есть остаток.

// Например, 5 это простое число, оно не может быть разделено без остатка на 2, 3 и 4.

// Напишите код, который выводит все простые числа из интервала от 2 до n.

// Для n = 10 результат должен быть 2,3,5,7.

// P.S. Код также должен легко модифицироваться для любых других интервалов.


// Для всех i от 1 до 10 {
//     проверить, делится ли число i на какое-либо из чисел до него
//     если делится, то это i не подходит, берём следующее
//     если не делится, то i - простое число
//   }

// let n = 10;

// nextPrime:
// for (let i = 2; i <= n; i++) { // Для всех i...

//   for (let j = 2; j < i; j++) { // проверить, делится ли число..
//     if (i % j == 0) continue nextPrime; // не подходит, берём следующее
//   }

//   alert( i ); // простое число
// }



let here = document.querySelector('#here');
let temp = ' ';
for (let i = 4; i<=400; i++){
  temp = temp + i + ' ';
}
here.innerHTML = temp;