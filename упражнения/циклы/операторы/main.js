// "" + 1 + 0 // 10  Почти все математические операторы выполняют численное преобразование. 
// //Исключение составляет +. Если одно из слагаемых является строкой, тогда и все остальные приводятся к строкам.
// "" - 1 + 0 //-1 
// true + false //1
// 6 / "3" //2
// "2" * "3" //6
// 4 + 5 + "px" //9px
// "$" + 4 + 5 //$45
// "4" - 2 //2
// "4px" - 2 //NaN
// 7 / 0 //Infinity
// "  -9  " + 5 // -9  5
// "  -9  " - 5 //-14
// null + 1 //1 т к null становится "0" после численного преобразования
// undefined + 1 //NaN (undefined становится NaN)
// " \t \n" - 2 //-2 Пробельные символы, такие как \t и \n по краям строки игнорируются при преобразовании в число, 
// //так что строка \t \n, аналогично пустой строке, становится 0 после численного преобразования.



// ЧЕМ ОНИ ОТЛИЧАЮТСЯ?
// 4 + 5 + "px" = "9px"
// "$" + 4 + 5 = "$45"
//в том что в первом случае строка прибавляется в конце, а во втором в начале 

// let year = prompt('В каком году появилась спецификация ECMAScript-2015?', '');

// if (year == 2015) {
//   alert( 'Да вы знаток!' );
// } else {
//   alert( 'А вот и неправильно!' ); // любое значение, кроме 2015
// }

// let accessAllowed;
// let age = prompt('Сколько вам лет?', '');

// if (age > 18) {
//   accessAllowed = true;
// } else {
//   accessAllowed = false;
// }

// alert(accessAllowed);

// то же самое, что и выше 


// let fastfood = prompt ('Whats better: macdonalds or teremok', '');
// let message = (fastfood = macdonalds) ? 'Здравствуй, малыш!' :
//   (fastfood = teremok) ? 'Привет!' 

// alert( message );


// let age = prompt('Возраст?', '');

// let message = (age < 3) ? 'Здравствуй, малыш!' :
//   (age < 18) ? 'Привет!' :
//   (age < 100) ? 'Здравствуйте!' :
//   'Какой необычный возраст!';

// alert( message );

// let knowledge = prompt('Какое «официальное» название JavaScript?', '');

// if (knowledge == 'ECMAScript') {
//     alert('YEEEEEAAAAH!');
// } else {
//     alert('Would u like to know? ECMAScript!');
// }

// если нужно проверить строку, то не забывать кавычки



// let result;

// if (a + b < 4) {
//   result = 'Мало';
// } else {
//   result = 'Много';
// }
// сделать через "?"

// let result = ( a + b < 4 ) ? 'Too little' : 'Too much';
// result = (a + b < 4) ? 'Мало' : 'Много';

// let result = prompt('Enter any number' , '');
// if (result > 0 ){
//     alert (1)
// } else if (result < 0){
//     alert (-1)
// } else if (result = 0){
//     alert ('0')
// }

// let message;

// if (login == 'Сотрудник') {
//   message = 'Привет';
// } else if (login == 'Директор') {
//   message = 'Здравствуйте';
// } else if (login == '') {
//   message = 'Нет логина';
// } else {
//   message = '';
// }
// Перепишите if..else с использованием нескольких операторов '?'.

// let login = prompt('Who are u?' , '')
// let whoIsit = (login == 'Сотрудник') ? alert('Привет!') :
// (login == 'Директор') ? alert('Здравствуйте') :
// (login == '') ? alert('Нет логина') : 
// alert('Иди отсюда');



// Операторы

//операнд - – то, к чему применяется оператор
//Например, в умножении 5 * 2 есть два операнда: левый операнд равен 5, а правый операнд равен 2.

//Унарным называется оператор, который применяется к одному операнду.
// Например, оператор унарный минус "-" меняет знак числа на противоположный:
//  let x = -x;

//Бинарным называется оператор, который применяется к двум операндам. 
//Тот же минус существует и в бинарной форме:

// let x = 1, y = 3;
// alert( y - x ); // 2, бинарный минус


//Унарный, то есть применённый к одному значению, плюс + ничего не делает с числами. 
//Но если операнд не число, унарный плюс преобразует его в число.

// let x = 1;
// alert( +x ); // 1

// let y = -2;
// alert( +y ); // -2

//ничего не изменилось

// Преобразует нечисла в числа
// alert( +true ); // 1
// alert( +"" );   // 0

// let apples = "2";
// let oranges = "3";

// alert( apples + oranges ); // "23", так как бинарный плюс складывает строки

let apples = "2";
let oranges = "3";

// оба операнда предварительно преобразованы в числа
// alert( +apples + +oranges ); // 5

// более длинный вариант
// alert( Number(apples) + Number(oranges) ); // 5

// Если хочется тут же использовать результат, то нужна префиксная форма:

// let counter = 0;
// alert( ++counter ); // 1

// Если нужно увеличить и при этом получить значение переменной до увеличения – постфиксная форма:

// let counter = 0;
// alert( counter++ ); // 0

// let n = 2;
// n = n + 5;
// n = n * 2;

// Эту запись можно укоротить при помощи совмещённых операторов += и *=:

// let n = 2;
// n += 5; // теперь n=7 (работает как n = n + 5)
// n *= 2; // теперь n=14 (работает как n = n * 2)

// let a = 0;
// alert( Boolean(a) ); // false

// let b = "0";
// alert( Boolean(b) ); // true


// alert(a == b); // true!

// Значения null и undefined равны == друг другу и не равны любому другому значению.
//сравнение с undifined всегда ложно!

5 > 4 //true
"ананас" > "яблоко" //false

"2" > "12" // сделала ошибку, тут true
//Первый символ первой строки "2" больше, чем первый символ второй "1".

undefined == null //true
undefined === null //false

null == "\n0\n" // сделала ошибку, тут false
// null равен только undefined.

null === +"\n0\n" //false